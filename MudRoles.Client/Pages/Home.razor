@page "/"
@using MudBlazor.Extensions.Components.ObjectEdit.Options
@inject IJSRuntime JS
<PageTitle>Home</PageTitle>

<MudPage Row="3" FullScreen="FullScreen.FullWithoutAppbar">
    <MudSection Column="1" Class="pb-6" ColSpan="6" Row="1" RowSpan="1">
        <MudPaper Elevation="0" Class="d-flex align-center justify-center">
            <MudText Typo="Typo.h1">Blazor Identity with Roles</MudText>
        </MudPaper>
    </MudSection>
    <MudSection Class="pb-6" Column="1" ColSpan="6" Row="2" RowSpan="2">
        <MudExCardList @ref="component" TData="object">
            @foreach (var topic in topics)
            {
                <MudCard Elevation="2" Outlined="true" Style="width:262px">
                    <MudCardHeader Style="z-index: 5">
                        <CardHeaderContent>
                            <MudText Typo="Typo.h6">@topic.Title</MudText>
                        </CardHeaderContent>
                        <CardHeaderActions>
                            <MudIconButton Icon="@Icons.Material.Filled.Camera" Color="Color.Default" />
                        </CardHeaderActions>
                    </MudCardHeader>
                    <MudCardContent Style="z-index: 5">
                        <MudText>@topic.Text</MudText>
                        <MudText Typo="Typo.body2">@topic.Subline</MudText>
                    </MudCardContent>
                    <MudCardActions Style="z-index: 5">
                        <MudButton Variant="Variant.Text" Color="Color.Primary">Read More</MudButton>
                    </MudCardActions>
                </MudCard>
            }
        </MudExCardList>
    </MudSection>
</MudPage>
<br />
<br />
    <CodeBlock>
public class PersonModel
{
    public int Id { get; set; }
    [Display(Name="First Name")]
    public string Name { get; set; }
    public string City { get; set; }
    public string State { get; set; }
    [BlazinHeaderFormat("{0:C}")]
    public int Salary { get; set; }
    [BlazinHeaderIgnore]
    public string ThisColumnWontEvenShowUp { get; set; }
}
</CodeBlock>
<br />
<CodeBlock Language="csharp">
public class HelloWorld
{
    public static void Main()
    {
        Console.WriteLine(&quot;Hello, World!&quot;);
    }
}
</CodeBlock>
    <br />
<CodeBlock Language="javascript">
function helloWorld() {
    console.log('Hello, World!');
}
</CodeBlock>
@code {
    private List<TopicModel> topics = new List<TopicModel>();
    MudExCardList<object>? component;

    protected override Task OnInitializedAsync()
    {
        var jsonString = @"
        [
            { ""Title"": ""Blazor Identity with Roles"", ""Text"": ""Implementing identity management with role-based access control in Blazor applications."", ""Subline"": ""Secure your Blazor apps with role-based identity management."" },
            { ""Title"": ""MudBlazor"", ""Text"": ""Utilizing MudBlazor components to build modern and responsive web applications."", ""Subline"": ""Enhance your Blazor apps with MudBlazor's rich component library."" },
            { ""Title"": ""MudBlazor Static"", ""Text"": ""Creating static web pages using MudBlazor components for a seamless user experience."", ""Subline"": ""Build static web pages with MudBlazor's powerful components."" },
            { ""Title"": ""CodeBeam MudBlazor Extensions"", ""Text"": ""Extending MudBlazor with custom components and additional functionalities."", ""Subline"": ""Customize and extend MudBlazor to fit your specific needs."" },
            { ""Title"": ""Highlight.js"", ""Text"": ""Integrating Highlight.js for syntax highlighting in your web applications."", ""Subline"": ""Add beautiful syntax highlighting to your code blocks with Highlight.js."" },
            { ""Title"": ""Role-based Secure APIs"", ""Text"": ""Developing secure APIs with role-based access control to protect your data."", ""Subline"": ""Implement role-based security for your APIs to ensure data protection."" },
            { ""Title"": ""API Keys Generation"", ""Text"": ""Generating and managing API keys for secure access to your services."", ""Subline"": ""Secure your APIs with robust API key generation and management."" },
            { ""Title"": ""Services Dependency Injection"", ""Text"": ""Implementing dependency injection for services in your applications."", ""Subline"": ""Leverage dependency injection to manage services efficiently in your apps."" }
        ]";

        topics = JsonSerializer.Deserialize<List<TopicModel>>(jsonString)!;
        return Task.CompletedTask;
    }

    private Action<ObjectEditMeta<MudExCardList<object>>> Configure()
    {
        return meta =>
        {
            meta.Property(m => m.HoverMode).Ignore();
        };
    }

    public class TopicModel
    {
        public string Title { get; set; } = string.Empty;
        public string Text { get; set; } = string.Empty;
        public string Subline { get; set; } = string.Empty;
    }

}