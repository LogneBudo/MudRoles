@page "/apikeys"
@using MudRoles.Client.Models
@inject HttpClient HttpClient
@inject IDialogService DialogService
@attribute [Authorize]
<PageTitle>Api Management</PageTitle>

<MudText Typo="Typo.h3" GutterBottom="true">API Keys Management</MudText>
<MudText Typo="Typo.body1" GutterBottom="true">These API Keys should only be used when developping and testing your application</MudText>

<MudTabs Elevation="2" Outlined="true" Position="Position.Top" Rounded="true" Border="true"
         ApplyEffectsToContainer="true" Class="mt-8" PanelClass="pa-6">
    <MudTabPanel Text="Create Key">
        <MudText Typo="Typo.h5" GutterBottom="true">Active</MudText>
        <MudDataGrid T="ApiKey" Hover="true" Items="@userApiKeys">
            <Columns>
                <PropertyColumn HeaderClass="font-bold" Property="x => x.Name" />
                <TemplateColumn Title="Key">
                    <CellTemplate Context="cellContext">
                        @if (cellContext.Item.Key != null)
                        {
                            <MudFab Class="key-button" EndIcon="@Icons.Material.Filled.VisibilityOff" Label="@($"{cellContext.Item.KeyPrefix}...{cellContext.Item.Key.Substring(cellContext.Item.Key.Length - 8)}")" />
                        }
                    </CellTemplate>
                </TemplateColumn>
                <PropertyColumn Property="x => x.CreationDate" Title="Created" />
                <PropertyColumn Property="x => x.ExpirationDate" Title="Expires" />
                <PropertyColumn Property="x => x.KeyPrefix" />
                <TemplateColumn CellClass="d-flex justify-end">
                    <CellTemplate>
                        <MudStack Row>
                            <MudButton Size="@Size.Small" Variant="@Variant.Filled" Color="@Color.Primary">Renew</MudButton>
                        </MudStack>
                    </CellTemplate>
                </TemplateColumn>
            </Columns>
            <NoRecordsContent>
                <MudText>No keys available</MudText>
            </NoRecordsContent>
        </MudDataGrid>
        <br />
        <br />
        <br />
        <MudText Typo="Typo.h5" GutterBottom="true">Recently Expired</MudText>
        <MudDataGrid T="ApiKey" Hover="true" Items="@userApiKeys">
            <Columns>
                <PropertyColumn HeaderClass="font-bold" Property="x => x.Name" />
                <PropertyColumn Property="x => x.Key" />
                <PropertyColumn Property="x => x.CreationDate" Title="Created" />
                <PropertyColumn Property="x => x.ExpirationDate" Title="Expires" />
                <PropertyColumn Property="x => x.KeyPrefix" />
                <TemplateColumn CellClass="d-flex justify-end">
                    <CellTemplate>
                        <MudStack Row>
                            <MudButton Size="@Size.Small" Variant="@Variant.Filled" Color="@Color.Primary">Renew</MudButton>
                        </MudStack>
                    </CellTemplate>
                </TemplateColumn>
            </Columns>
            <NoRecordsContent>
                <MudText>No keys available</MudText>
            </NoRecordsContent>
        </MudDataGrid>
    </MudTabPanel>
    <MudTabPanel Text="Store">
        <MudText>Content Store</MudText>
    </MudTabPanel>
    <MudTabPanel Text="Users">
        <MudText>Content Users</MudText>
    </MudTabPanel>
</MudTabs>
<br />
<MudButton Variant="Variant.Filled" Color="Color.Primary" DropShadow="true" ButtonType="ButtonType.Submit" @onclick="@(() => PostGenerateAsync(scopes))">Generate API Keys</MudButton>
<style>
    .mud-table-head {
        font-weight: 500;
    }
        /* Change this to your desired font weight */
</style>
@code {
    private List<ApiKey> userApiKeys = new();
    private string errorMessage = string.Empty;
    private List<Scope> scopes = new();
    [CascadingParameter]
    private Task<AuthenticationState>? authenticationState { get; set; }
    protected override async Task OnInitializedAsync()
    {
        await LoadScopes();
        await LoadApiKeys();
    }

    private async Task PostGenerateAsync(List<Scope> scopes)
    {
        var parameters = new DialogParameters<ApiKeyDialog> { { x => x.Scopes, scopes } };
        var options = new DialogOptions { CloseOnEscapeKey = true, CloseButton = true, MaxWidth = MaxWidth.Small, FullWidth = true };

        var dialog = await DialogService.ShowAsync<ApiKeyDialog>("API Key Generator", parameters, options);
        var result = await dialog.Result;

        if (result != null && !result.Canceled)
        {
            var name = result.Data;

        }

        var response = await HttpClient.PostAsync("api/apikeys", null);
        if (response.IsSuccessStatusCode)
        {
            await LoadApiKeys(); // Reload the keys after generating a new one
        }
        else
        {
            errorMessage = "Failed to generate API key.";
        }
    }
    public sealed class Scope
    {
        public string Controller { get; set; }
        public string Verb { get; set; }
        public string? Endpoint { get; set; }
        public bool IsChecked { get; set; }
    }
    private async Task LoadScopes()
    {
        try
        {
            var response = await HttpClient.GetFromJsonAsync<List<Scope>>("api/apikeys/scopes");
            scopes = response ?? new List<Scope>(); // Handle null response
            errorMessage = string.Empty; // Clear any previous error messages
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading scopes: {ex.Message}";
        }
    }
    private async Task LoadApiKeys()
    {
        try
        {
            var response = await HttpClient.GetFromJsonAsync<List<ApiKey>>("api/apikeys");
            userApiKeys = response ?? new List<ApiKey>(); // Handle null response
            errorMessage = string.Empty; // Clear any previous error messages
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading API keys: {ex.Message}";
        }
        StateHasChanged();
    }
    internal class ApiKey
    {
        public int Id { get; set; }

        public string? Name { get; set; }

        public string? KeyPrefix { get; set; }
        public string? Key { get; set; }
        public DateTime CreationDate { get; set; }
        public DateTime ExpirationDate { get; set; }
        public string? UserId { get; set; }
    }
}
