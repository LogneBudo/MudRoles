@using MudBlazor
@using FluentValidation
@using MudRoles.Client.Pages
@using System.Globalization
@using static MudRoles.Client.Pages.ApiMgt

<EditForm Model="@Role" OnValidSubmit="OnValidSubmit" OnInvalidSubmit="HandleInvalidSubmit">
    <MudDialog Class="blur dialog-background" TitleClass="blur dialog-background-title" ContentClass="dialog-background-surface py-10" ActionsClass="dialog-background-surface">
        <DialogContent>
            <DataAnnotationsValidator />
            @if (ShowMudPaper)
            {
                <MudPaper Class="px-8 py-4" Elevation="3">
                    <MudText Color="Color.Error">
                        <ValidationSummary />
                    </MudText>
                </MudPaper>
            }
            <br />
            <br />
            <MudTextField @bind-Value="Role.RoleName" Pattern="^[a-zA-Z]+$" Mask="@mask" Label="Role Name" TextChanged="OnTextChanged" Immediate="true" />
            <br />
            <br />
        </DialogContent>
        <DialogActions>
            <MudButton Color="Color.Error" OnClick="Cancel">Cancel</MudButton>
            <MudButton Disabled="@_processing" ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary">
                @if (_processing)
                {
                    <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                    <MudText Class="ms-2">Adding</MudText>
                }
                else
                {
                    <MudText>Add</MudText>
                }
            </MudButton>
        </DialogActions>
    </MudDialog>
</EditForm>
<style>
    ul.validation-errors {
        list-style-type: square !important;
    }

    .blur {
        backdrop-filter: blur(10px);
    }

    .dialog-background {
        background-color: transparent;
    }

    .dialog-background-title {
        background: rgb(from var(--mud-palette-primary) r g b / 50%);
        color: var(--mud-palette-white);
    }

    .dialog-background-surface {
        background: rgb(from var(--mud-palette-surface) r g b / 75%);
    }
</style>
@code {
    private bool _processing = false;
    private string errorMessage = string.Empty;
    bool ShowMudPaper = false;
    [CascadingParameter]
    private MudDialogInstance? MudDialog { get; set; }
    RoleItem Role = new RoleItem();
    public IMask mask = new RegexMask(@"^[a-zA-Z]+$");
    private void OnTextChanged(string text)
    {
        Role.RoleName = ToProperCase(text);
        StateHasChanged();
    }
    private void HandleInvalidSubmit()
    {
        ShowMudPaper = true;
        StateHasChanged();
    }
    private async void OnValidSubmit(EditContext context)
    {
        _processing = true;
        await Task.Delay(2000);
        Role.NormalizedName = Role.RoleName.ToUpper();
        _processing = false;
        MudDialog?.Close(DialogResult.Ok(Role));
    }
    private string ToProperCase(string input)
    {
        if (string.IsNullOrEmpty(input))
            return input;

        return CultureInfo.CurrentCulture.TextInfo.ToTitleCase(input.ToLower());
    }
    private void Cancel() => MudDialog?.Cancel();
}
