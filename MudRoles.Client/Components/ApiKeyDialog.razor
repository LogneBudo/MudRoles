@using MudBlazor
@using FluentValidation
@using MudRoles.Client.Pages
@using static MudRoles.Client.Pages.ApiMgt
<EditForm Model="@keyInputModel" OnValidSubmit="OnValidSubmit" OnInvalidSubmit="HandleInvalidSubmit">
    <MudDialog Class="blur dialog-background" TitleClass="blur dialog-background-title" ContentClass="dialog-background-surface py-10" ActionsClass="dialog-background-surface">
        <DialogContent>
            <DataAnnotationsValidator />
            @if (ShowMudPaper)
            {
                <MudPaper Class="px-8 py-4" Elevation="3">
                    <MudText Color="Color.Error">
                        <ValidationSummary />
                    </MudText>
                </MudPaper>
            }
            <MudTextField @bind-Value="keyInputModel.ApiKeyName" HelperText="Min. 5 characters" Label="API Key Name" For="@(() => keyInputModel.ApiKeyName)" />
                <br />
                @if (keyInputModel.Scopes != null)
                {
                    @foreach (var scope in keyInputModel.Scopes)
                    {
                        <MudSwitch @bind-Value="scope.IsChecked" ThumbIcon="@(scope.IsChecked == true ? Icons.Material.Filled.Done : Icons.Material.Filled.Close)" ThumbIconColor="@(scope.IsChecked == true ? Color.Success : Color.Error)">
                        <MudChip T="string" Style="@ApiMgt.GetVerbColor(scope.Verb ?? "")" Label="true">@scope.Verb</MudChip>
                                <span style="font-weight:600!important" class="align-content-center">&nbsp;&nbsp; @($"{scope.Endpoint?.ToLowerInvariant()}")</span>

                        </MudSwitch>
                    }
                    <ValidationMessage For="@(() => keyInputModel.Scopes)" />
                }
            </DialogContent>
            <DialogActions>
                <MudButton Color="Color.Error" OnClick="Cancel">Cancel</MudButton>
                <MudButton Disabled="@_processing" ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary">
                    @if (_processing)
                    {
                        <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                        <MudText Class="ms-2">Generating</MudText>
                    }
                    else
                    {
                        <MudText>Generate</MudText>
                    }
                </MudButton>
            </DialogActions>
    </MudDialog>
</EditForm>
<style>
    ul.validation-errors {
        list-style-type: square!important;
    }
    .blur {
        backdrop-filter: blur(10px);
    }

    .dialog-background {
        background-color: transparent;
    }

    .dialog-background-title {
        background: rgb(from var(--mud-palette-primary) r g b / 50%);
        color: var(--mud-palette-white);
    }

    .dialog-background-surface {
        background: rgb(from var(--mud-palette-surface) r g b / 75%);
    }
</style>

@code {
    private bool _processing = false;
    private KeyInputModel keyInputModel = new KeyInputModel();
    private string errorMessage = string.Empty;
    bool ShowMudPaper = false;
    [CascadingParameter]
    private MudDialogInstance? MudDialog { get; set; }

    [Parameter]
    public List<Scope>? Scopes { get; set; }
    protected override void OnInitialized()
    {
        keyInputModel.Scopes = Scopes ?? new List<Scope>();
    }
    private async void OnValidSubmit(EditContext context)
    {
        _processing = true;
        await Task.Delay(2000);
        _processing = false;
        MudDialog?.Close(DialogResult.Ok(keyInputModel));
    }
    private void HandleInvalidSubmit()
    {
        ShowMudPaper = true;
        StateHasChanged();
    }
    private void Cancel() => MudDialog?.Cancel();
}
