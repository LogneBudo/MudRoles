@page "/profile-management"

@using System.Net.Http.Json
@using System.ComponentModel.DataAnnotations
@using MudBlazor.Utilities
@using static MudRoles.Client.Pages.Generics.SignUp
@inject ThemeService ThemeService
@inject HttpClient Http
@inject ISnackbar Snackbar
@attribute [Authorize]

<MudThemeProvider IsDarkMode="@(ThemeService.CurrentTheme == MudRolesTheme.DarkTheme)" Theme="@ThemeService.CurrentTheme" />
<MudText Typo="Typo.h6" GutterBottom="true">Profile</MudText>
<br />
<br />
<MudGrid Spacing="2">
    <MudItem xs="6">
        <MudCard Elevation="3">
            <MudCardHeader>
                <CardHeaderContent>
                    <MudText Typo="Typo.h6">The Story Book</MudText>
                </CardHeaderContent>
                <CardHeaderActions>
                </CardHeaderActions>
            </MudCardHeader>
            <MudCardContent>
                <MudText>This day everything happened.</MudText>
                <MudText Typo="Typo.body2">The quick, brown fox jumps over a lazy dog.</MudText>
            </MudCardContent>
            <MudCardActions>
                <MudButton Variant="Variant.Text" Color="Color.Primary">Read More</MudButton>
            </MudCardActions>
        </MudCard>
    </MudItem>
    <MudItem Style="height:1055px!important;" xs="6">
        <EditForm style="height:100%" Model="Input" FormName="profile" OnValidSubmit="OnValidSubmitAsync">
            <DataAnnotationsValidator />
            <MudGrid Spacing="2">
                <MudItem md="12">
                    <MudTextField Margin="Margin.Dense" Variant="Variant.Outlined" Typo="Typo.h6" 
                            Value="@username" Label="Username" Disabled="true" Placeholder="Please choose your username." />
                </MudItem>
                <MudItem md="12">
                    <MudTextField Margin="Margin.Dense" Variant="Variant.Outlined" Typo="Typo.h6" 
                            Label="First Name" UserAttributes="@(new() { { "autocomplete", "true" }, { "aria-required", "true" } } )" HelperText="Please enter your first name." For="@(() => Input.FirstName)" @bind-Value="@Input.FirstName" Placeholder="Please state your first name." />
                </MudItem>
                <MudItem md="12">
                    <MudTextField Margin="Margin.Dense" Variant="Variant.Outlined" Typo="Typo.h6" 
                                    Label="Last Name" UserAttributes="@(new() { { "autocomplete", "true" }, { "aria-required", "true" } } )" HelperText="Please enter your last name." For="@(() => Input.LastName)" @bind-Value="@Input.LastName" Placeholder="Please state your last name." />
                </MudItem>
                <MudItem md="12">
                    <MudTextField Margin="Margin.Dense" Variant="Variant.Outlined" Typo="Typo.h6" For="@(() => Input.PhoneNumber)" @bind-Value="Input.PhoneNumber"
                                    Label="Phone Number" HelperText="Please enter your phone number."
                                    UserAttributes="@(new() { { "autocomplete", "tel-national" } } )" />
                </MudItem>
                <MudItem Class="mx-6 mb-5" md="12" sm="12" xs="12">
                    <MudText Class="mud-typography mud-typography-body1 mud-input-label pt-3 --mud-palette-text-secondary">Pick the theme mode</MudText>
                    <MudSwitch Color="Color.Dark" UncheckedColor="Color.Primary" For="@(() => Input.IsDarkTheme)" @bind-Value="ThemeChoice" Label="Dark Theme" />
                </MudItem>
                <MudItem md="12" sm="12" xs="12">
                    <MudStack Class="mx-5 mb-7">
                        <MudText>Choose your type of Avatar</MudText>
                        <MudToggleGroup T="string" SelectionMode="SelectionMode.SingleSelection" @bind-Value="_choiceAvatar" Color="Color.Primary" CheckMark FixedContent>
                            <MudToggleItem Value="@("Avataralone")" Text="Avatar alone" />
                            <MudToggleItem Value="@("IconAvatar")" Text="Icon Avatar" />
                            <MudToggleItem Value="@("YourphotoAvatar")" Text="Your photo Avatar" />
                        </MudToggleGroup>
                    </MudStack>
                </MudItem>
                @if (_choiceAvatar == string.Empty)
                {
                    <MudItem Style="height:426px!important" md="12" sm="12" xs="12" Class="d-flex mt-5 justify-center">
                    </MudItem>
                }
                @if (_choiceAvatar == AvatarChoice.IconAvatar.ToString())
                {
                    <MudItem Style="height:426px!important" md="12" sm="12" xs="12" Class="d-flex mt-5 pt-7 justify-center">
                        <MudAvatar Variant="Variant.Outlined" Style="@avatarStyle">
                            @if (string.IsNullOrEmpty(Source))
                            {
                                <span style="color:white">A</span>
                            }
                            else
                            {
                                <MudImage Src="@Source" />
                            }
                        </MudAvatar>
                        <MudExColorBubble @bind-Color="@MyColor" t CloseAfterSelect="true" ShowColorPreview="true" @ref="component"></MudExColorBubble>
                    </MudItem>
                }
                else if (_choiceAvatar == @AvatarChoice.Avataralone.ToString())
                {
                    <MudItem Style="height:450px!important" xs="12">
                        <AvatarSelection Label="Pick an avatar" TItem="string" Items="@avatarItems" @bind-SelectedItem="selectedAvatar" />
                    </MudItem>
                }
                else if (_choiceAvatar == @AvatarChoice.YourphotoAvatar.ToString())
                {
                    <MudItem Style="height:426px!important" md="12" sm="12" xs="12">
                        <MudForm Model="@model" @ref="@form" Validation="@(ValidationRules.ValidateValue)" ValidationDelay="0">
                            <MudCardContent>
                                <MudTextField @bind-Value="model.Name" For="@(() => model.Name)" HelperText="Set another name to your file if you wish..." Immediate="true" Label="Name" />
                                <MudExUploadEdit T="UploadableFile"
                                                 AllowFolderUpload="false"
                                                 Variant="Variant.Outlined"
                                                 For="@(() => model.Files)"
                                                 TextUploadFile="Click here to upload files"
                                                 TextDropZone="Drag and Drop files here"
                                                 Label="Add your own photo"
                                                 ColorizeIcons="true"
                                                 MinHeight="80"
                                                 Class="MudExUploadExCustom"
                                                 AllowRename="true"
                                                 TextUploadFiles="Upload Photo Avatar"
                                                 @bind-UploadRequests="model.Files">
                                </MudExUploadEdit>
                            </MudCardContent>
                            <MudCardActions>
                                <MudButton Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Submit</MudButton>
                            </MudCardActions>
                        </MudForm>
                    </MudItem>
                }
                <MudItem md="12">
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" Size="Size.Large" FullWidth="true" ButtonType="ButtonType.Submit" OnClick="@(async () => await OnValidSubmitAsync())" >Update</MudButton>
                </MudItem>
            </MudGrid>
        </EditForm>
    </MudItem>
</MudGrid>

@code {
    private string _choiceAvatar = "";
    private string avatarStyle = string.Empty;
    private string _source = "";
    private MudColor _color = new MudColor();
    private string selectedAvatar = "";
    MudExColorBubble component = default!;
    MudForm? _form = new();
    MudForm? _form2 = new();
    private MudForm form = default!;
    private FileModel model = new();
    private FileModelFluentValidator ValidationRules = new();
    private List<AvatarItem<string>> avatarItems = new()
    {
        new AvatarItem<string> { ImageUrl = "avatar1.png", Value = "avatar1" },
        new AvatarItem<string> { ImageUrl = "avatar2.png", Value = "avatar2" },
        new AvatarItem<string> { ImageUrl = "avatar3.png", Value = "avatar3" },
        new AvatarItem<string> { ImageUrl = "avatar4.png", Value = "avatar4" },
        new AvatarItem<string> { ImageUrl = "avatar5.png", Value = "avatar5" }
    };
    private string? Source
    {
        get => _source;
        set
        {
            if (_source != value)
            {
                _source = value ?? "";
                StateHasChanged();
            }

        }
    }
    private MudColor MyColor
    {
        get => _color;
        set
        {
            if (_color != value)
            {
                _color = value;
                avatarStyle = $"height:70px; width:70px; font-size:2rem; background-color:{_color.ToString()};";
                StateHasChanged();
            }
        }
    }
    private string? username;
    private string? phoneNumber;
    private string? firstName;
    private string? lastName;
    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();
    private bool _isDarkTheme = false;
    public bool ThemeChoice
    {
        get => _isDarkTheme;
        set
        {
            if (_isDarkTheme != value)
            {
                _isDarkTheme = value;
                Input.IsDarkTheme = value;
                ThemeService.ToggleDarkMode();
                StateHasChanged();
            }
        }
    }
    protected override async Task OnInitializedAsync()
    {
        ThemeService.OnThemeChanged += HandleThemeChanged;
        _color = new MudColor(ThemeService.GetPrimaryColorHex(ThemeService.CurrentTheme));
        avatarStyle = $"height:70px; width:70px; font-size:2rem; background-color:{_color.ToString()};";
        var userInfo = await Http.GetFromJsonAsync<UserInfo>("api/auth/user");
        if (userInfo != null)
        {
            username = userInfo.Username;
            phoneNumber = userInfo.PhoneNumber;
            firstName = userInfo.FirstName;
            Input.FirstName = firstName!;
            lastName = userInfo.LastName;
            Input.LastName = lastName!;
            ThemeChoice = userInfo.IsDarkTheme;
            Input.IsDarkTheme = ThemeChoice;
            Input.PhoneNumber = phoneNumber;
            Input.AvatarChoice = userInfo.AvatarChoice ?? string.Empty;
            _choiceAvatar = userInfo.AvatarChoice ?? string.Empty;
            StateHasChanged();
        }
        await base.OnInitializedAsync();
    }
    private async Task HandleThemeChanged()
    {
        await InvokeAsync(StateHasChanged);
    }
    private async Task OnValidSubmitAsync()
    {
        try
        {
            if (_choiceAvatar!= null)
            {
                Input.AvatarChoice = _choiceAvatar;
            }
            var response = await Http.PostAsJsonAsync("api/auth/update-profile", Input);
            if (response.IsSuccessStatusCode)
            {
                Snackbar?.Add(await response.Content.ReadAsStringAsync() ?? "Profile updated successfully.", Severity.Success);
            }
            else
            {
                var error = await response.Content.ReadFromJsonAsync<ApiErrorResponse>();
                Snackbar?.Add(error?.Message ?? "An error occurred while updating the profile.", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar?.Add($"An unexpected error occurred: {ex.Message}", Severity.Error);
        }
    }
    private class ApiResponse
    {
        public string? Message { get; set; }
    }

    private class ApiErrorResponse
    {
        public string? Message { get; set; }
    }
    private sealed class InputModel
    {
        [Phone]
        [Display(Name = "Phone number")]
        public string? PhoneNumber { get; set; }

        [Required]
        [Display(Name = "First Name")]
        public string FirstName { get; set; } = string.Empty;

        [Required]
        [Display(Name = "Last Name")]
        public string LastName { get; set; } = string.Empty;

        [Display(Name = "Title")]
        public string? Title { get; set; }

        [Required]
        [EmailAddress]
        [Display(Name = "New email")]
        public string? NewEmail { get; set; }

        [Display(Name = "Dark Theme Preference")]
        public bool IsDarkTheme { get; set; }

        [Display(Name = "Avatar Choice")]
        public string AvatarChoice { get; set; } = string.Empty;
    }

    private class UserInfo
    {
        public string? Username { get; set; }
        public string? PhoneNumber { get; set; }
        public string? FirstName { get; set; }
        public string? LastName { get; set; }
        public bool IsDarkTheme { get; set; }
        public string? AvatarChoice { get; set; }
    }
}
