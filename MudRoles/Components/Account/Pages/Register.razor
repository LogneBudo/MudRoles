@page "/Account/Register"
@using MudRoles.Components
@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Text.Encodings.Web
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using MudRoles.Data


@inject UserManager<ApplicationUser> UserManager
@inject IUserStore<ApplicationUser> UserStore
@inject SignInManager<ApplicationUser> SignInManager
@inject IEmailSender<ApplicationUser> EmailSender
@inject ILogger<Register> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager
@inject IJSRuntime JSRuntime
<PageTitle>Register</PageTitle>

<MudContainer MaxWidth="MaxWidth.Large" Gutters="false">
    <MudGrid Spacing="0">
        <MudItem Class="rounded-l-xl d-flex flex-column object-contain align-center justify-center" xl="6" xxl="6" lg="6" md="0" sm="0" xs="0" Style="background: url('Register-Background.png') no-repeat center center; background-size: cover;">
            <MudText Color="Color.Primary" Typo="Typo.h3">CodeMoa</MudText>
            <MudText Color="Color.Secondary" Typo="Typo.h3">Registration</MudText>
        </MudItem>
        <MudItem lg="6" md="12" sm="12" xs="12">
            <MudPaper Elevation="0" Class="pa-8 rounded-r-xl">
                <StatusMessage Message="@Message" />
                <EditForm Model="Input" asp-route-returnUrl="@ReturnUrl" method="post" OnValidSubmit="RegisterUser" FormName="register">
                    <DataAnnotationsValidator />
                    <MudItem md="12" sm="12" xs="12">
                        <div class="d-flex justify-center">
                            <MudIcon Icon="@CustomIcons.LogoDark" Color="Color.Primary" Size="Size.Large" ViewBox="0 0 500 500" Style="width: 100px; height: 100px;" />
                        </div>
                    </MudItem>
                    <DataAnnotationsValidator />
                    <MudItem md="12" sm="12" xs="12">
                        <div class="d-flex justify-center">
                            <MudText Typo="Typo.h4">Register</MudText>
                        </div>
                    </MudItem>
                    <MudItem md="12" sm="12" xs="12">
                        <div class="d-flex justify-center">
                            <MudText Typo="Typo.body1" GutterBottom="true">Create a new account.</MudText>
                        </div>
                    </MudItem>
                    <MudGrid>
                        <MudItem md="12" sm="12" xs="12">
                            <div class="materialize-select-wrapper">
                                <label for="titleSelect">Choose a title:</label>
                                <select id="@titleSelect" @bind="Input.Title">
                                    <option value="" disabled selected>Choose your option</option>
                                    <option value="Mr">Mr</option>
                                    <option value="Mrs">Mrs</option>
                                    <option value="Dr">Dr</option>
                                </select>
                            </div>
                        </MudItem>
                        <MudItem md="12" sm="12" xs="12">
                            <MudStaticTextField For="@(() => Input.FirstName)" @bind-Value="Input.FirstName"
                                                Label="First name" Placeholder="Paul"
                                                UserAttributes="@(new() { { "autocomplete", "true" }, { "aria-required", "true" } } )" />
                        </MudItem>
                        <MudItem md="12" sm="12" xs="12">
                            <MudStaticTextField For="@(() => Input.LastName)" @bind-Value="Input.LastName"
                                                Label="Last name" Placeholder="Simon"
                                                UserAttributes="@(new() { { "autocomplete", "true" }, { "aria-required", "true" } } )" />
                        </MudItem>
                        <MudItem md="12" sm="12" xs="12">
                            <MudStaticSwitch Color="Color.Dark" UncheckedColor="Color.Primary" For="@(() => Input.IsDarkTheme)" @bind-Value="Input.IsDarkTheme"
                                             Label="Dark Theme" />
                        </MudItem>
                        <MudItem md="12" sm="12" xs="12">
                            <MudStaticTextField For="@(() => Input.Email)" @bind-Value="Input.Email"
                                                Label="Email" Placeholder="name@example.com"
                                                UserAttributes="@(new() { { "autocomplete", "true" }, { "aria-required", "true" } } )" />
                        </MudItem>
                        <MudItem md="12" sm="12" xs="12">
                            <MudStaticTextField For="@(() => Input.Password)" @bind-Value="Input.Password"
                                                Label="Password" InputType="InputType.Password" Placeholder="password"
                                                UserAttributes="@(new() { { "autocomplete", "new-password" }, { "aria-required", "true" } } )" />
                        </MudItem>
                        <MudItem md="12" sm="12" xs="12">
                            <MudStaticTextField For="@(() => Input.ConfirmPassword)" @bind-Value="Input.ConfirmPassword"
                                                Label="Confirm Password" InputType="InputType.Password" Placeholder="confirm password"
                                                UserAttributes="@(new() { { "autocomplete", "new-password" }, { "aria-required", "true" } } )" />
                        </MudItem>
                        <MudItem md="12" sm="12" xs="12">
                            <MudStaticButton DropShadow="true" Size="Size.Large" Variant="Variant.Filled" Color="Color.Primary" FullWidth="false" FormAction="FormAction.Submit">Register</MudStaticButton>
                        </MudItem>
                        <MudItem md="12" sm="12" xs="12">
                            <MudText Typo="Typo.body1" GutterBottom="true">Use another service to register.</MudText>
                            <ExternalLoginPicker />
                        </MudItem>
                    </MudGrid>
                </EditForm>
            </MudPaper>
        </MudItem>
    </MudGrid>
</MudContainer>

@code {
    private string titleSelect = Guid.NewGuid().ToString();
    private IEnumerable<IdentityError>? identityErrors;
    private Title enumValue { get; set; } = Title.Mr;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    [Parameter]
    public string? Value
    {
        get;
        set;
    }

    [Parameter]
    public EventCallback<string> ValueChanged
    {
        get;
        set;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("initializeMaterializeSelect");
        }
    }

    private string? Message => identityErrors is null ? null : $"Error: {string.Join(", ", identityErrors.Select(error => error.Description))}";

    private readonly List<string> avatars = new()
    {
        "avatar1.png",
        "avatar2.png",
        "avatar3.png",
        "avatar4.png",
        "avatar5.png"
    };

    public async Task RegisterUser(EditContext editContext)
    {
        var user = CreateUser();

        var model = (InputModel)editContext.Model;

        
        await UserStore.SetUserNameAsync(user, Input.Email, CancellationToken.None);
        var emailStore = GetEmailStore();
        await emailStore.SetEmailAsync(user, Input.Email, CancellationToken.None);

        user.FirstName = model.FirstName;
        user.LastName = model.LastName;
        user.Title = null;
        user.IsDarkTheme = model.IsDarkTheme;
        var result = await UserManager.CreateAsync(user, Input.Password);

        if (!result.Succeeded)
        {
            identityErrors = result.Errors;
            return;
        }

        Logger.LogInformation("User created a new account with password.");

        // Assign the "User" role to the newly registered user
        var roleResult = await UserManager.AddToRoleAsync(user, "User");

        var userId = await UserManager.GetUserIdAsync(user);
        var code = await UserManager.GenerateEmailConfirmationTokenAsync(user);
        code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
        var callbackUrl = NavigationManager.GetUriWithQueryParameters(
            NavigationManager.ToAbsoluteUri("Account/ConfirmEmail").AbsoluteUri,
            new Dictionary<string, object?> { ["userId"] = userId, ["code"] = code, ["returnUrl"] = ReturnUrl });

        await EmailSender.SendConfirmationLinkAsync(user, Input.Email, HtmlEncoder.Default.Encode(callbackUrl));

        if (UserManager.Options.SignIn.RequireConfirmedAccount)
        {
            RedirectManager.RedirectTo(
                "Account/RegisterConfirmation",
                new() { ["email"] = Input.Email, ["returnUrl"] = ReturnUrl });
        }

        await SignInManager.SignInAsync(user, isPersistent: false);
        RedirectManager.RedirectTo(ReturnUrl);
    }

    private ApplicationUser CreateUser()
    {
        try
        {
            return Activator.CreateInstance<ApplicationUser>();
        }
        catch
        {
            throw new InvalidOperationException($"Can't create an instance of '{nameof(ApplicationUser)}'. " +
                $"Ensure that '{nameof(ApplicationUser)}' is not an abstract class and has a parameterless constructor.");
        }
    }

    private IUserEmailStore<ApplicationUser> GetEmailStore()
    {
        if (!UserManager.SupportsUserEmail)
        {
            throw new NotSupportedException("The default UI requires a user store with email support.");
        }
        return (IUserEmailStore<ApplicationUser>)UserStore;
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        [Display(Name = "Email")]
        public string Email { get; set; } = "";

        [Required]
        [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
        [DataType(DataType.Password)]
        [Display(Name = "Password")]
        public string Password { get; set; } = "";

        [DataType(DataType.Password)]
        [Display(Name = "Confirm password")]
        [Compare("Password", ErrorMessage = "The password and confirmation password do not match.")]
        public string ConfirmPassword { get; set; } = "";

        [Required]
        [Display(Name = "First Name")]
        public string FirstName { get; set; } = "";

        [Required]
        [Display(Name = "Last Name")]
        public string LastName { get; set; } = "";

        [Display(Name = "Title")]
        public string Title { get; set; } = "";

        [Display(Name = "Theme Preference")]
        public bool IsDarkTheme { get; set; } = false;

        [Display(Name = "Avatar")]
        public string AvatarId { get; set; } = "";
    }
}
